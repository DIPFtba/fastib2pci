{"version":3,"sources":["controller/MessageReceiver.tsx","controller/MessageSender.tsx","utils/FileDownload.tsx","controller/Controller.tsx","controller/TaskSequencer.tsx","runtime/PlayerCatalog.tsx","runtime/ItemCatalog.tsx","runtime/PlayerFrame.tsx","controller/App.tsx","index.tsx"],"names":["MessageReceiver","playerReadyListener","preloadReturnListener","getUserIdReturnListener","loginDialogClosedListener","getTaskReturnListener","getScoringResultReturnListener","traceLogListener","recordingListener","getTasksStateReturnListener","taskSwitchRequestListener","window","addEventListener","event","processMessageEvent","listener","this","origin","data","source","dataObject","JSON","parse","e","console","info","eventType","traceLogData","metaData","logEntriesList","log","stringify","map","entry","warn","request","scope","item","task","undefined","userId","state","recordingData","recordingEntriesList","result","fieldValue","id","isSuccess","message","sendMessageToTaskPlayer","targetWindow","payload","postMessage","targetOrigin","downloadAssessmentConfig","sendJsonDownloadRequest","then","response","candidate","tasks","Array","isArray","every","isTaskIdentification","error","isAssessmentConfiguration","Error","length","filename","Promise","resolve","reject","xhttp","XMLHttpRequest","responseType","onload","onerror","statusText","open","send","isPlayerConfiguration","playerId","runtimeVersion","frameContentFile","configureMessageReceiver","messageReceiver","taskSequencer","playerCatalog","itemCatalog","controllerConfig","setTaskSwitchRequestListener","sendingWindow","requestDetails","sendingPlayerId","getPlayerId","decision","cancel","nextTask","backTask","type","reason","goToTask","getNextAction","advisedPlayerId","targetPlayer","frameWindow","advisedFrame","getFrameWindow","getTargetPlayer","stopTask","doToAll","logout","show","titleLabel","fieldLabel","buttonLabel","showLogin","processLoginRequest","targetItemVersion","getVersion","compatiblePlayer","getCompatiblePlayer","getScoringResult","startTask","processTaskSwitchRequest","setLoginDialogClosedListener","nickname","setUserId","setTaskSequencer","configuration","initialize","loadItemsAndStartFirstTask","mathJaxCdnUrl","catch","setPlayerReadyListener","receiveReadySignal","channel","interval","targetWindowType","assessmentConfiguration","all","taskConfiguration","filter","onlyUnique","itemName","isRegistered","itemRootPathPrefix","runtimeCompatibilityVersion","name","isItemConfiguration","downloadItemConfig","itemConfiguration","register","doToAllCompatible","itemConfig","resourcePath","externalResourcePath","libraryPathsMap","MathJax","installItem","installAllItems","firstTask","startAdvice","itemVersion","findCompatiblePlayerAndStartTask","value","index","indexOf","location","toStart","sendingPlayer","isCompatibleById","someCompatiblePlayer","findCompatiblePlayer","TaskSequencer","currentTaskIndex","switchAndReturnTask","currentIndex","_","findMatchingTask","getIndexToPick","failureMessage","indexToPick","findIndex","PlayerCatalog","totalPlayerCount","players","pendingReadySignals","Set","frameRef","compatibilityChecker","newPlayer","isCompatible","readyFlag","push","applyPendingReadySignal","sourceWindow","receivingPlayer","findPlayerByWindow","add","findPlayerById","find","playerInfo","action","forEach","player","frame","current","style","visibility","playerWindow","has","delete","ItemCatalog","items","version","findByName","PlayerFrame","props","playerConfiguration","React","useRef","divRef","useEffect","contentWindow","registerPlayer","className","ref","position","top","left","borderStyle","width","height","display","alignItems","justifyContent","showPlayerInfo","fontSize","itemWidth","itemHeight","title","src","frameBorder","scrolling","App","controllerConfiguration","playersArray","itemSize","traceLogTransmission","transmitUrl","httpTimeout","isLogTransmissionConfiguration","isControllerConfiguration","startReceiving","buildMessageReceiver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bf879cd.chunk.js","sourcesContent":["import { PreloadResultStruct } from './PreloadResultStruct';\n\n/**\n * Service that receives messages from the task players \n * and delivers them to the configured listeners. \n * \n * All listeners are called with the frame window of the sending task player\n * (besides the specific message content).\n */\nexport default class MessageReceiver {\n  private playerReadyListener : ((source: MessageEventSource) => void) | 'noListener' = 'noListener'; \n  private preloadReturnListener : ((source: MessageEventSource, result : PreloadResultStruct) => void) | 'noListener' = 'noListener'; \n  private getUserIdReturnListener : ((source: MessageEventSource, result : string) => void) | 'noListener' = 'noListener'; \n  private loginDialogClosedListener : ((source: MessageEventSource, result : string) => void) | 'noListener' = 'noListener'; \n  private getTaskReturnListener : ((source: MessageEventSource, result: GetTaskReturn) => void) | 'noListener' = 'noListener'; \n  private getScoringResultReturnListener : ((source: MessageEventSource, result: string) => void) | 'noListener' = 'noListener'; \n  \n  private traceLogListener : ((source: MessageEventSource, metaData: string, logEntriesList: string[]) => void) | 'noListener' = 'noListener'; \n  private recordingListener : ((source: MessageEventSource, metaData: string, recordingEntriesList: string[]) => void) | 'noListener' = 'noListener'; \n  private getTasksStateReturnListener : ((source: MessageEventSource, userId: string, state: string) => void) | 'noListener' = 'noListener'; \n\n  private taskSwitchRequestListener : ((source: MessageEventSource, request: RequestType, requestDetails?: TaskRequestDetails) => void) | 'noListener' = 'noListener'; \n\n  /**\n   * Start to receive messages.\n   */\n  public startReceiving() {\n    window.addEventListener(\"message\", (event) => {\n      this.processMessageEvent(event);\n    })\n  \n  }\n  \n  public setPlayerReadyListener(listener: (source: MessageEventSource) => void) : void {\n    this.playerReadyListener = listener;\n  }\n\n  public setPreloadReturnListener(listener: (source: MessageEventSource, result : PreloadResultStruct) => void) : void {\n    this.preloadReturnListener = listener;\n  }\n\n  public setGetUserIdReturnListener(listener: (source: MessageEventSource, result : string) => void) : void {\n    this.getUserIdReturnListener = listener;\n  }\n\n  public setLoginDialogClosedListener(listener: (source: MessageEventSource, result : string) => void) : void {\n    this.loginDialogClosedListener = listener;\n  }\n\n  public setGetTaskReturnListener(listener: (source: MessageEventSource, result: GetTaskReturn) => void) : void {\n    this.getTaskReturnListener = listener;\n  }\n\n  public setGetScoringResultReturnListener(listener: (source: MessageEventSource, result: string) => void) : void {\n    this.getScoringResultReturnListener = listener;\n  }\n\n  public setTraceLogListener(listener: (source: MessageEventSource, metaData: string, logEntriesList: string[]) => void) : void {\n    this.traceLogListener = listener;\n  }\n\n  public setRecordingListener(listener: (source: MessageEventSource, metaData: string, recordingEntriesList: string[]) => void) : void {\n    this.recordingListener = listener;\n  }\n\n  public setGetTasksStateReturnListener(listener: (source: MessageEventSource, userId: string, state: string) => void) : void {\n    this.getTasksStateReturnListener = listener;\n  }\n\n  public setTaskSwitchRequestListener(listener: (source: MessageEventSource, request: RequestType, requestDetails?: TaskRequestDetails) => void) : void {\n    this.taskSwitchRequestListener = listener;\n  }\n\n  private processMessageEvent(event : MessageEvent<any>) : void {\n    const { origin, data, source } = event;\n\n    if (source === null) {\n      console.warn(`Ignoring message without source.`);\n      return;\n    }\n\n    if (origin !== window.origin) {\n      console.warn(`Ignoring message from wrong origin. Message origin is ${origin}. Accepted origin is ${window.origin}.`);\n      return;\n    }\n\n    let dataObject;\n    try {\n      dataObject = JSON.parse(data);\n    } catch (e) {\n      console.info(`Ignoring message with non-JSON data: ${data}`);\n      return;\n    }\n\n    const eventType = dataObject.eventType;\n\n    if (eventType === 'taskPlayerReady' && this.playerReadyListener !== 'noListener') {\n      this.playerReadyListener(source);\n      return;\n    }\n\n    if (eventType === 'setPreloadReturn' && this.preloadReturnListener !== 'noListener') {\n      const result : PreloadResultStruct = { isSuccess: dataObject.isSuccess, message: dataObject.message };\n      this.preloadReturnListener(source, result);\n      return;\n    }\n\n    if (eventType === 'getUserIdReturn' && this.getUserIdReturnListener !== 'noListener') {\n      this.getUserIdReturnListener(source, dataObject.id);\n      return;\n    }\n\n    if (eventType === 'loginDialogClosed' && this.loginDialogClosedListener !== 'noListener') {\n      this.loginDialogClosedListener(source, dataObject.fieldValue);\n      return;\n    }\n\n    if (eventType === 'getTaskReturn' && this.getTaskReturnListener !== 'noListener') {\n      this.getTaskReturnListener(source, {scope: dataObject.scope, item: dataObject.item, task: dataObject.task});\n      return;\n    }\n\n    if (eventType === 'getScoringResultReturn' && this.getScoringResultReturnListener !== 'noListener') {\n      this.getScoringResultReturnListener(source, JSON.stringify(dataObject.result));\n      return;\n    }\n\n    if (eventType === 'traceLogTransmission' && this.traceLogListener !== 'noListener') {\n      const {metaData, logEntriesList} = dataObject.traceLogData;\n      console.log(dataObject.traceLogData);\n      this.traceLogListener(source, JSON.stringify(metaData), logEntriesList.map((entry : object) => JSON.stringify(entry)));\n      return;\n    }\n\n    if (eventType === 'recordingTransmission' && this.recordingListener !== 'noListener') {\n      const {metaData, recordingEntriesList} = dataObject.recordingData;\n      this.recordingListener(source, JSON.stringify(metaData), recordingEntriesList.map((entry : object) => JSON.stringify(entry)));\n      return;\n    }\n\n    if (eventType === 'getTasksStateReturn' && this.getTasksStateReturnListener !== 'noListener') {\n      const {userId, state} = dataObject;\n      this.getTasksStateReturnListener(source, userId, JSON.stringify(state));\n      return;\n    }\n\n    if (eventType === 'taskSwitchRequest' && this.taskSwitchRequestListener !== 'noListener') {\n      const {request, scope, item, task} = dataObject;\n      this.taskSwitchRequestListener(source, request, request === 'goToTask' ? {scope, item, task} : undefined);\n      return;\n    }\n\n    console.warn(`Ignoring message not matching any listener: ${data}`)\n\n  }\n}\n\n\n/**\n * Structures describing a task switch request:\n */\nexport type RequestType = 'nextTask' | 'previousTask' | 'cancelTask' | 'goToTask';\n\nexport interface TaskRequestDetails {\n  item?: string, \n  task: string, \n  scope: string\n}\n\nexport interface GetTaskReturn {\n  item: string, \n  task?: string, \n  scope: string\n}\n","/**\n * Send a message to the TaskPlayer running in the given target window.\n * \n * This method covers all messages defined by the TaskPlayer API\n * (even though we currently do not use all of them).\n */\nexport function sendMessageToTaskPlayer(targetWindow : MessageEventSource, payload : \n    // configuration control\n    { eventType: 'setWaitMessages', primary: string, secondary: string} | \n    { eventType: 'addItem', itemConfig: object, resourcePath: string, externalResourcePath: string, libraryPathsMap: {MathJax: string} } |\n    { eventType: 'clearItems'} |\n    { eventType: 'setPreload', itemName: string} |\n    // trace control\n    { eventType: 'insertMessageInTrace', message: string} |\n    { eventType: 'logStateToTrace'} |\n    { eventType: 'flushTrace'} |\n    { eventType: 'setTraceLogTransmissionChannel', channel: 'postMessage', targetWindowType?: string, targetOrigin?: string, interval: number} |\n    { eventType: 'setTraceLogTransmissionChannel', channel: 'http',  transmitUrl?: string,  interval: number,  httpTimeout?: number} |\n    { eventType: 'setTraceLogTransmissionChannel', channel: 'console',  interval: number} |\n    { eventType: 'setTraceContextId', contextId: string} |\n    // recordings control \n    { eventType: 'setRecordingTransmissionChannel', channel: 'http', transmitUrl: string, httpTimeout: number} |\n    { eventType: 'setRecordingTransmissionChannel', channel: 'console'} |\n    { eventType: 'setRecordingContextId', contextId: string} |\n    // user control\n    { eventType: 'setUserId', id: string} |\n    { eventType: 'logout'} |\n    { eventType: 'getUserId'} |\n    { eventType: 'showLogin', titleLabel: string, fieldLabel: string, buttonLabel: string} |\n    // task control\n    { eventType: 'startTask', scope: string, item: string, task: string} |\n    { eventType: 'stopTask'} |\n    { eventType: 'pauseTask' } |\n    { eventType: 'resumeTask' } |\n    { eventType: 'getTask' } |\n    { eventType: 'setTaskSequencer', targetWindowType: 'parent', targetOrigin: string} |\n    { eventType: 'setSwitchAvailability', request: 'nextTask' | 'previousTask' | 'cancelTask', value: boolean} |\n    { eventType: 'setSwitchAvailability', request: 'goToTask', scope: string, item?: string, task: string, value: boolean} |\n    // task state control\n    { eventType: 'getTasksState'} |\n    { eventType: 'clearTasksState' } |\n    { eventType: 'preloadTasksState', state: string } |\n    // scoring control\n    { eventType: 'getScoringResult'} |\n    // state machine control\n    { eventType: 'sendStatemachineEvent', event: string} |\n    // header control\n    { eventType: 'setHeaderButtons', headerButtons: HeaderButtonDescription[]} |\n    { eventType: 'setMenuCarousels', course: string[], scopes: HeaderMenuScopeDescription[]} |\n    // developer mode control\n    { eventType: 'activateDebuggingWindows', scoreHotKey: string, traceHotKey: string, statemachineHotKey: string} \n  ) \n{\n  targetWindow.postMessage(JSON.stringify(payload), { targetOrigin: '*'});    \n}\n\n\nexport interface HeaderButtonDescription {\n  image?: string, \n  text: string,\n  event: string,\n  height: number,\n  width: number\n}\n\nexport interface HeaderMenuScopeDescription {\n  name: string, \n  tasks: {item: string, task: string}[]\n}","/**\n * Asynchronous methods that download files and provide their content as proper structures.\n */\n\n// ----------------- public API --------------------------------------------------------------\n\n/**\n * Return a promise that downloads the controller configuration.\n */\n export function downloadControllerConfig() : Promise<ControllerConfiguration> {\n  const fullConfigFileName = `./controller/config.json`;\n  return sendJsonDownloadRequest(fullConfigFileName).then(\n    (response) => {\n      if(!isControllerConfiguration(response)) {\n        throw new Error(`Controller configuration is invalid: ${JSON.stringify(response)}`);\n      }\n      console.log(`Received controller configuration`, response);\n      return response;\n    }\n  );\n}\n\n\n/**\n * Return a promise that downloads the assessment configuration.\n */\nexport function downloadAssessmentConfig() : Promise<AssessmentConfiguration> {\n  const fullConfigFileName = `./assessments/config.json`;\n  return sendJsonDownloadRequest(fullConfigFileName).then(\n    (response) => {\n      if(!isAssessmentConfiguration(response)) {\n        throw new Error(`Assessment configuration is invalid: ${JSON.stringify(response)}`);\n      }\n      if (response.tasks.length < 1) {\n        throw new Error(`Assessment configuration contains no tasks: ${JSON.stringify(response)}`);\n      }\n      console.log(`Received assessment configuration`, response);\n      return response;\n    }\n  );\n}\n\n\n/**\n * Return a promise that downloads the item configuration for the given item.\n *\n *  The corresponding *.json file must have this name with .json appended as extension.\n */\nexport function downloadItemConfig(itemName : string) : Promise<ItemConfiguration> {\n  const fullConfigFileName = `./items/${itemName}/config.json`;\n  return sendJsonDownloadRequest(fullConfigFileName).then(\n    (response) => {\n      if(!isItemConfiguration(response)) {\n        throw new Error(`Configuration of ${itemName} is invalid: ${JSON.stringify(response)}`);\n      }\n      console.log(`Received configuration of ${itemName}`, response);\n      return response;\n    }\n  );\n}\n\n/**\n * The content of the assessment configuration file.\n */\nexport interface AssessmentConfiguration {\n  tasks: TaskIdentification[]\n}\n\nexport interface TaskIdentification {\n  item: string, \n  task: string, \n  scope: string\n}\n\n/**\n * The content of an item configuration file (as far as we need it).\n */\nexport interface ItemConfiguration {\n  runtimeCompatibilityVersion: string,\n  name: string\n}\n\n/**\n * The content of the controller configuration file.\n */\nexport interface ControllerConfiguration {\n  traceLogTransmission?: LogTransmissionConfiguration\n  mathJaxCdnUrl?: string,\n  itemSize?: {\n    height: number,\n    width: number\n  },\n  players: PlayerConfiguration[],\n  showPlayerInfo: boolean\n}\n\nexport interface LogTransmissionConfiguration {\n  transmitUrl: string,\n  interval: number, \n  httpTimeout: number, \n}\n\nexport interface PlayerConfiguration {\n  playerId: string,\n  runtimeVersion: string,\n  frameContentFile: string,\n}\n\n// ----------------- private stuff --------------------------------------------------------------\n\n/**\n * Return a Promise that processes a GET request for the given file.\n */\nfunction sendJsonDownloadRequest(filename : string) : Promise<any> {\n  return new Promise((resolve, reject) => {\n    const xhttp = new XMLHttpRequest();\n    xhttp.responseType = 'json';\n    xhttp.onload = () => resolve(xhttp.response);\n    xhttp.onerror = () => reject(xhttp.statusText);\n    xhttp.open('GET', filename, true);\n    xhttp.send();\n  });\n}\n\n/**\n * Runtime type checker for AssessmentConfiguration candidates.\n */\n function isAssessmentConfiguration(candidate: any) : candidate is AssessmentConfiguration {\n  try {\n    return candidate.tasks && Array.isArray(candidate.tasks) && candidate.tasks.every(isTaskIdentification); \n  }\n  catch(error) {\n    return false;\n  }\n}\n\n/**\n * Runtime type checker for TaskIdentification candidates.\n */\nfunction isTaskIdentification(candidate: any) : candidate is TaskIdentification {  \n  try {\n    return (\n      candidate.item && typeof candidate.item === 'string' &&\n      candidate.task && typeof candidate.task === 'string' &&\n      candidate.scope && typeof candidate.scope === 'string' \n    );\n  }\n  catch(error) {\n    return false;\n  }\n}\n\n/**\n * Runtime type checker for ItemConfiguration candidates.\n * \n * We just check some 'marker' members. \n */\n function isItemConfiguration(candidate: any) : candidate is ItemConfiguration {  \n  try {\n    return (\n      candidate.runtimeCompatibilityVersion && typeof candidate.runtimeCompatibilityVersion === 'string' &&\n      candidate.name && typeof candidate.name === 'string'\n    );\n  }\n  catch(error) {\n    return false;\n  }\n}\n\n/**\n * Runtime type checker for ControllerConfiguration candidates.\n */\n function isControllerConfiguration(candidate: any) : candidate is ControllerConfiguration {  \n  try {\n    return (\n        candidate.traceLogTransmission === undefined || isLogTransmissionConfiguration(candidate.traceLogTransmission)\n      ) && (\n        candidate.mathJaxCdnUrl === undefined || \n        (\n          candidate.mathJaxCdnUrl && typeof candidate.mathJaxCdnUrl === 'string'\n        )      \n      ) && (\n        candidate.itemSize === undefined ||\n        (\n          candidate.itemSize.height && typeof candidate.itemSize.height === 'number' &&\n          candidate.itemSize.width && typeof candidate.itemSize.width === 'number'\n        )\n      ) && (\n        candidate.players && Array.isArray(candidate.players) && candidate.players.every(isPlayerConfiguration)\n      ) && (\n        typeof candidate.showPlayerInfo === 'boolean'\n      )\n      ;\n  }\n  catch(error) {\n    return false;\n  }\n}\n\n/**\n * Runtime type checker for LogTransmissionConfiguration candidates.\n */\n function isLogTransmissionConfiguration(candidate: any) : candidate is LogTransmissionConfiguration {  \n  try {\n    return (\n          candidate.transmitUrl && typeof candidate.transmitUrl === 'string' &&\n          candidate.interval && typeof candidate.interval === 'number' &&\n          candidate.httpTimeout && typeof candidate.httpTimeout === 'number'\n    );\n  }\n  catch(error) {\n    return false;\n  }\n}\n\n/**\n * Runtime type checker for PlayerConfiguration candidates.\n */\n function isPlayerConfiguration(candidate: any) : candidate is PlayerConfiguration {  \n  try {\n    return (\n      candidate.playerId && typeof candidate.playerId === 'string' &&\n      candidate.runtimeVersion && typeof candidate.runtimeVersion === 'string' &&\n      candidate.frameContentFile && typeof candidate.frameContentFile === 'string' \n    );\n  }\n  catch(error) {\n    return false;\n  }\n}\n","import { v4 } from 'uuid'; \nimport MessageReceiver, { TaskRequestDetails, RequestType } from \"./MessageReceiver\";\nimport { sendMessageToTaskPlayer } from \"./MessageSender\";\nimport { \n  ControllerConfiguration, \n  LogTransmissionConfiguration, \n  AssessmentConfiguration, \n  downloadAssessmentConfig, \n  downloadItemConfig \n} from \"../utils/FileDownload\"; \nimport TaskSequencer, { Decision } from \"./TaskSequencer\";\nimport { TaskIdentification } from \"../utils/FileDownload\";\nimport PlayerCatalog from '../runtime/PlayerCatalog';\nimport ItemCatalog from '../runtime/ItemCatalog';\n\n/**\n * Controller coordinating actions required to run the tasks list in the available task players.\n * \n * The controller supports multiple task player instances running in different frames (to support\n * multiple CBA runtime versions). It gets access to these instances and their frames via a player catalog. \n * \n * All activity is triggered by the events coming in from the CBA runtimes once the task players have started there:\n * \n * The task-player-ready events coming in trigger configuration of the sending task player:\n *  - Set session ID (each player gets its own session ID).\n *  - Configure trace log transmission channel for the sending task player.\n * \n * The last task-player-ready event coming in also triggers the login phase:\n *  - Show login dialog in the sending task player.\n * \n * The login-done event triggers the initialization phase which ends with starting a first task:\n *  - Set the user ID for all available task players.\n *  - Download of configuration data and item data.\n *  - For each item not yet registered in the item catalog:\n *     * Register the item in the item catalog.\n *     * Determine the compatible task players and upload the item configuration there.\n *  - Establish a task sequencer.\n *  - Obtain the first task to run from the task sequencer and start it on the task player determined by the task sequencer. \n * \n * The task-switch-request events trigger task-switch responses determined by our task sequencer logic:\n *  - The controller informs the task sequencer about the request and the task player sending it. \n *  - The task sequencer tells the controller what to do next: Show a login dialog or start a task on a specific task player. \n *  - The controller stops the currently running task and \n *     * either shows a login dialog on the chosen task player \n *     * or starts the next task on the chosen task player.\n *  - If the task sequencer does not choose the next task player the controller picks one:\n *     * If the previous task player is compatible, it reuses that one. \n *     * Otherwise It picks some compatible player. \n * \n * Since the controller does not maintain any internal memory (for now) \n * it is just a method that configures the listeners in the message receiver.\n * \n */\n\n\n/**\n * Establish the controller, i.e. configure listeners in the message receiver. \n * \n * This defines our response to the messages coming in from the task players running in the CBA runtimes. \n * \n * The controller's activity is driven by the messages coming in from the task players: \n * - The 'ready' messages trigger the login phase.\n * - The 'login-done' message triggers the item initialization phase which will download items and start the first task of the assessment.\n * - Task switch request messages trigger task selection and task stop/start respones. \n */\nexport function configureMessageReceiver(\n  messageReceiver: MessageReceiver, \n  taskSequencer: TaskSequencer, \n  playerCatalog: PlayerCatalog,\n  itemCatalog: ItemCatalog,  \n  controllerConfig: ControllerConfiguration\n) \n{\n  // What to do once a task switch request arrives: get next action from task sequencer and run it.\n  messageReceiver.setTaskSwitchRequestListener((sendingWindow: MessageEventSource, request: RequestType, requestDetails?: TaskRequestDetails) => {\n    \n    const sendingPlayerId = playerCatalog.getPlayerId(sendingWindow);\n    if (sendingPlayerId === undefined) {\n      console.warn(`Received switch request from unknown task player frame. This is an internal error. We ignored the request.`);\n      return;\n    }\n    \n    const decision = getNextAction(sendingPlayerId, request, requestDetails, taskSequencer);\n    switch (decision.type) {\n      case 'blocked': \n        console.log(`Cannot follow switch request ${request}: ${decision.reason}. We ignored the request.`)\n        return;\n      case 'login': \n        processLoginRequest(decision.playerId, sendingPlayerId, sendingWindow, playerCatalog);\n        return;\n      case 'taskSwitch': \n        processTaskSwitchRequest(decision.playerId, decision.nextTask, sendingPlayerId, sendingWindow, itemCatalog, playerCatalog);\n        return;\n      default: \n        const _exhaustiveCheck : never = decision;\n        return _exhaustiveCheck;\n    }\n\n  })\n\n  // What to do once login is finished: Download configuration, set up everything, and start first task.\n  messageReceiver.setLoginDialogClosedListener((sendingWindow, nickname) => {\n    playerCatalog.doToAll((targetWindow: MessageEventSource) => setUserId(nickname, targetWindow));\n    playerCatalog.doToAll((targetWindow: MessageEventSource) => setTaskSequencer(targetWindow));\n    downloadAssessmentConfig()\n      .then((configuration) => {\n        if (configuration.tasks.length < 1) {\n          throw new Error(`No tasks declared in assessment configuration ${configuration}`);\n        }\n        taskSequencer.initialize(configuration, playerCatalog);\n        loadItemsAndStartFirstTask(configuration, controllerConfig.mathJaxCdnUrl, playerCatalog, itemCatalog, taskSequencer);\n      })\n      .catch((error) => {\n        console.warn(`Could not initialize assessment properly: ${error.message}`);\n      });\n  })\n  \n  // What to do once the task player is ready: Load required items and show login dialog.\n  messageReceiver.setPlayerReadyListener((sendingWindow) => {\n    playerCatalog.receiveReadySignal(sendingWindow);\n    // initializeSessionAndShowLogin(sendingWindow, controllerConfig.traceLogTransmission, playerCatalog)\n    // setUserId(\"DEPP\", sendingWindow);\n    playerCatalog.doToAll((targetWindow: MessageEventSource) => setUserId(\"DEPP\", targetWindow));\n    playerCatalog.doToAll((targetWindow: MessageEventSource) => setTaskSequencer(targetWindow));\n    downloadAssessmentConfig()\n      .then((configuration) => {\n        if (configuration.tasks.length < 1) {\n          throw new Error(`No tasks declared in assessment configuration ${configuration}`);\n        }\n        taskSequencer.initialize(configuration, playerCatalog);\n        loadItemsAndStartFirstTask(configuration, controllerConfig.mathJaxCdnUrl, playerCatalog, itemCatalog, taskSequencer);\n      })\n      .catch((error) => {\n        console.warn(`Could not initialize assessment properly: ${error.message}`);\n      });\n      sendMessageToTaskPlayer(sendingWindow, {\n        eventType: 'setTraceLogTransmissionChannel', \n        channel: 'postMessage', \n        interval: 2000, \n        targetWindowType: \"parent\"});      \n  });\n\n}\n\n/**\n * Obtain the next action by asking the task sequencer. \n */\n function getNextAction(\n  sendingPlayerId: string, \n  request: RequestType, \n  requestDetails: TaskRequestDetails | undefined, \n  taskSequencer: TaskSequencer\n  ) : Decision\n{\n  switch (request) {\n    case 'cancelTask': return taskSequencer.cancel(sendingPlayerId);\n    case 'nextTask': return taskSequencer.nextTask(sendingPlayerId);\n    case 'previousTask': return taskSequencer.backTask(sendingPlayerId);\n    case 'goToTask': {\n      if (requestDetails === undefined) return { type: 'blocked', reason: 'Task specification is missing in goToTask request.' }\n      return taskSequencer.goToTask(sendingPlayerId, requestDetails);\n    }\n    default: {\n      const _exhaustiveCheck: never = request;\n      return _exhaustiveCheck;\n    }\n  }\n}\n\n/**\n * Process a request to show a new login.\n * \n * We stop the currently running task and show the login dialog.\n */\nfunction processLoginRequest(advisedPlayerId: string | undefined, sendingPlayerId: string, sendingWindow: MessageEventSource, playerCatalog: PlayerCatalog) : void {\n  const targetPlayer = getTargetPlayer(advisedPlayerId, sendingPlayerId, sendingWindow, playerCatalog);\n\n  stopTask(sendingWindow);\n  playerCatalog.doToAll((targetWindow: MessageEventSource) => {logout(targetWindow)});\n  playerCatalog.show(targetPlayer.id);\n  showLogin(targetPlayer.frameWindow);\n  return;\n}\n\n/**\n * Process a request to switch to another task.\n * \n * We stop the currently running task and start the new one.\n */\nfunction processTaskSwitchRequest(\n  advisedPlayerId: string | undefined, \n  nextTask: TaskIdentification, \n  sendingPlayerId: string, \n  sendingWindow: MessageEventSource, \n  itemCatalog: ItemCatalog, \n  playerCatalog: PlayerCatalog) : void \n{\n  const targetItemVersion = itemCatalog.getVersion(nextTask.item);\n  if (targetItemVersion === undefined) {\n    console.warn(`Received task switch request to unknown item ${nextTask.item}. We ignored the request.`);\n    return;\n  }\n\n  const compatiblePlayer = getCompatiblePlayer(advisedPlayerId, targetItemVersion, {id: sendingPlayerId, frameWindow: sendingWindow}, playerCatalog);\n  if (compatiblePlayer === undefined) {\n    console.warn(`Received task switch request to item ${nextTask.item} with version ${targetItemVersion} and could not find a compatible task player. We ignored the request.`);\n    return;\n  }\n  \n  getScoringResult(sendingWindow)\n  stopTask(sendingWindow);\n  playerCatalog.show(compatiblePlayer.id);\n  startTask(nextTask, compatiblePlayer.frameWindow);\n  return;\n\n}\n\n\n/**\n * Load all required items and start the first task as advised by the task sequencer.\n */\nfunction loadItemsAndStartFirstTask(\n  configuration: AssessmentConfiguration, \n  mathJaxCdnUrl: string | undefined,\n  playerCatalog: PlayerCatalog, \n  itemCatalog: ItemCatalog,\n  taskSequencer: TaskSequencer,\n) : void {\n  Promise.resolve()\n    .then(() => installAllItems(configuration, mathJaxCdnUrl, playerCatalog, itemCatalog))\n    .then(() => {\n      const firstTask = taskSequencer.firstTask();\n      if (firstTask === undefined) {\n        throw new Error(`Invalid task sequencer configuration blocks starting the first task.`);\n      }\n      findCompatiblePlayerAndStartTask(firstTask, playerCatalog, itemCatalog)\n    })\n    .catch((error) => {\n      console.warn(`Could not properly initialize items and start first task: ${error.message}`);\n    });\n}\n\n/**\n * Build a promise that installs all items contained in the given assessment configuration.\n */\nfunction installAllItems(\n  assessmentConfiguration: AssessmentConfiguration, \n  mathJaxCdnUrl: string | undefined,\n  playerCatalog: PlayerCatalog,\n  itemCatalog: ItemCatalog\n  ) : Promise<void[]> \n{ \n  return Promise.all(\n      assessmentConfiguration.tasks\n        .map((taskConfiguration) => taskConfiguration.item)\n        .filter(onlyUnique)\n        .filter((itemName) => !itemCatalog.isRegistered(itemName))\n        .map((itemName) => installItem(itemName, mathJaxCdnUrl, playerCatalog, itemCatalog))\n  ); \n}\n\n/**\n * Is the given index the first occurrence of the given value in the given array?\n * \n * Using this method in a filter on an array will drop out all duplicates. \n */\n function onlyUnique<T>(value: T, index: number, all: T[]) : boolean {\n  return all.indexOf(value) === index;\n}\n\n/**\n * Build a promise that downloads the configuration for the item with the given name and installs it in the CBA runtime.\n */\nfunction installItem(\n  itemName: string, \n  mathJaxCdnUrl: string | undefined, \n  playerCatalog: PlayerCatalog, \n  itemCatalog: ItemCatalog) : Promise<void> {\n  const itemRootPathPrefix = `../items/${itemName}`;\n\n  return downloadItemConfig(itemName)\n    .then((itemConfiguration) => {\n      itemCatalog.register(itemConfiguration.name, itemConfiguration.runtimeCompatibilityVersion);\n      playerCatalog.doToAllCompatible(itemConfiguration.runtimeCompatibilityVersion, (targetWindow) => sendMessageToTaskPlayer(targetWindow, {\n        eventType: 'addItem', \n        itemConfig: itemConfiguration, \n        resourcePath: `${itemRootPathPrefix}/resources`,\n        externalResourcePath: `${itemRootPathPrefix}/external-resources`,\n        libraryPathsMap: { MathJax: mathJaxCdnUrl === undefined ? 'math-jax unknown' : mathJaxCdnUrl}\n      }));\n    })\n    .catch((error) => {\n      throw new Error(`Could not download configuration for item ${itemName}: ${error.message}`);\n    })\n}\n\n\n/**\n * Start the given task on a compatible player and make the player visible.\n */\nfunction findCompatiblePlayerAndStartTask(\n  startAdvice: { firstTask: TaskIdentification, playerId? : string},\n  playerCatalog: PlayerCatalog, \n  itemCatalog: ItemCatalog\n) : void \n{\n  const itemVersion = itemCatalog.getVersion(startAdvice.firstTask.item);\n  if (itemVersion === undefined) {\n    throw new Error(`Could not find item ${startAdvice.firstTask.item}.`);\n  }\n\n  const compatiblePlayer = getCompatiblePlayer(startAdvice.playerId, itemVersion, undefined, playerCatalog);\n  if (compatiblePlayer === undefined) {\n    throw new Error(`Could not find compatible player for item ${startAdvice.firstTask.item} with version ${itemVersion}.`);\n  }\n\n  playerCatalog.show(compatiblePlayer.id);\n  startTask(startAdvice.firstTask, compatiblePlayer.frameWindow);\n}\n\n/**\n * Do the initial steps once the task player is ready: \n *  - Assign a trace context id.\n *  - Configure the transmission channel for the trace log data.\n *  - Show a login box.\n */\n\n/*\n function initializeSessionAndShowLogin(\n   targetWindow: MessageEventSource, \n   logTransmissionConfig: LogTransmissionConfiguration | undefined, \n   playerCatalog: PlayerCatalog) {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'setTraceContextId', contextId: buildTraceContextId()});\n  \n  // If no log transmission channel is configured we simply keep the default (i.e. log to console)\n  if (logTransmissionConfig !== undefined) {\n    sendMessageToTaskPlayer(targetWindow, {\n      eventType: 'setTraceLogTransmissionChannel', \n      channel: 'http', interval: logTransmissionConfig.interval, \n      httpTimeout: logTransmissionConfig.httpTimeout, \n      transmitUrl: logTransmissionConfig.transmitUrl })\n  }\n  else{\n    sendMessageToTaskPlayer(targetWindow, {\n      eventType: 'setTraceLogTransmissionChannel', \n      channel: 'postMessage', \n      interval: 2000, \n      targetWindowType: \"parent\"});\n  }\n  \n  if (playerCatalog.allPlayersReady()) {\n    const targetPlayer = playerCatalog.getPlayerId(targetWindow);\n    if (targetPlayer === undefined) {\n      console.warn(`Received ready request from unknown task player frame. This is an internal error. The initial login dialog might be unstable.`);\n    } else {\n      playerCatalog.show(targetPlayer);\n    }\n    showLogin(targetWindow);\n  }\n}\n*/\n\n/**\n * Establish ourselves as task sequencer in CBA runtime.\n */\nfunction setTaskSequencer(targetWindow: MessageEventSource) {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'setTaskSequencer', targetOrigin: window.location.origin, targetWindowType: 'parent'})\n}\n\n/**\n * Stop the running task in the CBA runtime.\n */\nfunction stopTask(targetWindow: MessageEventSource) : void {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'stopTask'});\n}\n\n/**\n * Start a task in the CBA runtime.\n */\nfunction startTask(toStart: TaskIdentification, targetWindow: MessageEventSource) : void {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'startTask', item: toStart.item, task: toStart.task, scope: toStart.scope});\n}\n\n/**\n * Request scoring result.\n */\nfunction getScoringResult(targetWindow: MessageEventSource) : void {\n  sendMessageToTaskPlayer(targetWindow, { eventType: 'getScoringResult'});\n}\n\n/**\n * Set the user ID in the CBA runtime.\n */\n function setUserId(userId: string, targetWindow: MessageEventSource) : void {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'setUserId', id: userId});\n}\n\n/**\n * Log out the current user.\n */\nfunction logout(targetWindow: MessageEventSource) : void {\n  sendMessageToTaskPlayer(targetWindow, {eventType: 'logout'});\n}\n\n/**\n * Trigger the login box in the CBA runtime.\n */\nfunction showLogin(targetWindow: MessageEventSource, ) {\n  sendMessageToTaskPlayer(targetWindow, {eventType: \"showLogin\", titleLabel: \"Placeholder for Login\", fieldLabel: \"Please enter anything (nickname) \", buttonLabel: \"Start\" });\n}\n\n/**\n * Build a unique trace context id. \n */\nfunction buildTraceContextId() : string {\n  return v4();\n}\n\n/**\n * Get the id of a compatible player.\n * \n * Return the advised player if that exists and is compatible. \n * Otherwise return the player of the sending window if that is given and is compatible. \n * Otherwise pick any compatible task player.\n * \n * We return undefined if no compatible task player is registered.\n */\nfunction getCompatiblePlayer(\n  advisedPlayerId: string | undefined, \n  itemVersion: string,\n  sendingPlayer: { id: string, frameWindow: MessageEventSource} | undefined, \n  playerCatalog: PlayerCatalog) \n  : { id: string, frameWindow: MessageEventSource } | undefined \n{\n  \n  if (advisedPlayerId !== undefined && playerCatalog.isCompatibleById(itemVersion, advisedPlayerId)) {\n    const frameWindow = playerCatalog.getFrameWindow(advisedPlayerId);\n    if (frameWindow === undefined) {\n      console.error(`Unexpected failure to find frame for registered player ${advisedPlayerId}. We try to find another compatible one.`);\n    } else {\n      return { id: advisedPlayerId, frameWindow: frameWindow };\n    }\n  }\n\n  if (sendingPlayer !== undefined && playerCatalog.isCompatibleById(itemVersion, sendingPlayer.id)) {\n    return sendingPlayer;\n  }\n\n  const someCompatiblePlayer = playerCatalog.findCompatiblePlayer(itemVersion);\n  return someCompatiblePlayer === undefined ? undefined : { id: someCompatiblePlayer.id, frameWindow: someCompatiblePlayer.frameWindow };\n}\n\n\n/**\n * Get the advised player if that is given and registered.\n * Otherwise return the given triggering player. \n */\nfunction getTargetPlayer(\n    advisedPlayerId: string | undefined, \n    sendingPlayerId: string, \n    sendingWindow: MessageEventSource, \n    playerCatalog: PlayerCatalog) \n    : { id: string, frameWindow:MessageEventSource } \n{\n  if (advisedPlayerId === undefined) {\n    return { id: sendingPlayerId, frameWindow: sendingWindow };\n  }\n\n  const advisedFrame = playerCatalog.getFrameWindow(advisedPlayerId);\n  if (advisedFrame === undefined) {\n    console.log(`Advised player for request is not regitered. We use the triggering player instead.`);\n    return { id: sendingPlayerId, frameWindow: sendingWindow }\n  }\n\n  return { id: advisedPlayerId, frameWindow: advisedFrame}\n}\n\n\n","import {AssessmentConfiguration} from \"../utils/FileDownload\"\nimport { TaskRequestDetails } from \"./MessageReceiver\";\nimport { TaskIdentification } from \"../utils/FileDownload\";\nimport PlayerCatalog from \"../runtime/PlayerCatalog\";\n\n/**\n * The component making all next/previous/cancel task decisions. \n * \n * We keep a memory of available tasks and the currently running task. \n * This implementation does not take the task player instances into account\n * and does not advise on the next task player to use.\n * \n * With no task player advice the controller\n * sticks to the task player which was used before\n * (if the player is able to run the requested item)\n * or picks some other compatible player. \n */\nexport default class TaskSequencer {\n  private currentTaskIndex : number | 'not set' = 'not set';\n  private tasks : TaskIdentification[] = [];\n\n  public initialize(assessmentConfiguration: AssessmentConfiguration, playerCatalog: PlayerCatalog) : void {\n    this.currentTaskIndex = 0;\n    this.tasks = assessmentConfiguration.tasks;\n  }\n\n  public firstTask() : { firstTask: TaskIdentification, playerId?: string } | undefined {\n    this.currentTaskIndex = 0;\n    return this.tasks.length < 1 ? undefined : { firstTask: this.tasks[0] };\n  }\n\n  public cancel(sendingPlayerId: string) : Decision {\n    return { type: 'login'};\n  }\n\n  public nextTask(sendingPlayerId: string) : Decision {\n    return this.switchAndReturnTask((currentIndex) => currentIndex + 1, 'no next task');\n  }\n\n  public backTask(sendingPlayerId: string) : Decision {\n    return this.switchAndReturnTask((currentIndex) => currentIndex - 1, 'no previous task');\n  }\n\n  public goToTask(sendingPlayerId: string, request: TaskRequestDetails) : Decision {\n    return this.switchAndReturnTask(\n      (_) => this.findMatchingTask(request),\n      `Task ${request.task} ${request.item === undefined ? 'with item unspecified' : ('in item ' + request.item)} and in scope ${request.scope} is not part of the assessment configuration.`);\n  }\n\n  /**\n   * Calculate the index to pick using the callback, check that it is in range, switch to that task and return it. \n   */\n  private switchAndReturnTask(getIndexToPick: (currentIndex : number) => number, failureMessage: string ) : Decision {\n    if (this.currentTaskIndex === 'not set') {\n      console.warn(`Task sequencer is not initialized properly. This blocks all task switches.`);\n      return { type: 'blocked', reason: 'Task sequencer not initialized properly.' };\n    }\n    const indexToPick = getIndexToPick(this.currentTaskIndex);\n    if (indexToPick < 0 || indexToPick > this.tasks.length - 1) return { type: 'blocked', reason: failureMessage };\n    this.currentTaskIndex = indexToPick;\n    return { type: 'taskSwitch', nextTask: this.tasks[this.currentTaskIndex]};\n  }\n\n  private findMatchingTask(request: TaskRequestDetails) : number {\n    if (!request.item) return this.tasks.findIndex((candidate) => request.task === candidate.task && request.scope === candidate.scope)\n    return this.tasks.findIndex((candidate) => request.item === candidate.item && request.task === candidate.task && request.scope === candidate.scope)\n  }\n  \n}\n\n\n/**\n * The decision returned at the requests like cancel, nextTask etc.\n */\nexport type Decision = \n  { \n    type: 'login',\n    playerId?: string\n  } | \n  {\n    type: 'taskSwitch',\n    nextTask: TaskIdentification,\n    playerId?: string\n  } | \n  {\n    type: 'blocked'\n    reason: string\n  }\n\n\n","/**\n * The component managing all available task players (i.e. the available CBA runtimes in the player frames).\n * \n * The application established multiple CBA runtimes (with different runtime versions).\n * Each CBA runtime lives in its own IFrame and runs a task player.\n * \n * This catalog keeps track of all available task players. \n * \n * Each task player instance: \n *  - Is identified by a unique id string.\n *  - Runs in a frame with a frame window that should be used to send messages to the task player instance.\n */\nexport default class PlayerCatalog {\n  private readonly totalPlayerCount : number;\n  private readonly players : PlayerInfo[] = [];\n  private readonly pendingReadySignals : Set<MessageEventSource> = new Set<MessageEventSource>();  \n\n\n  // ------------ public interface -----------------------------------------------\n\n  /**\n   * Build the player catalog. \n   * \n   * We need the final total count of task players a priori:\n   * The controller should wait with the first login until all task players are ready \n   * to receive messages. We determine whether all task players are registered already\n   * by comparing with this total number of expected task players. \n   * \n   * @param totalPlayerCount The total number of task players that will register. \n   */\n  constructor(totalPlayerCount: number) {\n    this.totalPlayerCount = totalPlayerCount;\n  }\n\n  /**\n   * Register a new task player instance in our catalog.\n   * \n   * We implicitly set the is-ready flag for the task player\n   * if we already received its ready message earlier.\n   */\n  public registerPlayer(\n    id: string, \n    frameWindow: MessageEventSource, \n    frameRef: React.MutableRefObject<HTMLIFrameElement|null>, \n    compatibilityChecker: (itemVersion: string) => boolean\n    ) : void \n  {\n    const newPlayer = {id, frameWindow, frameRef, isCompatible: compatibilityChecker, readyFlag: false};\n    this.players.push(newPlayer);\n    this.applyPendingReadySignal(newPlayer);\n    if (this.totalPlayerCount < this.players.length) {\n      console.warn(`Unexpected registration of another task player ${id} as number ${this.players.length}. Check the total player count: ${this.totalPlayerCount}. We might have started the first login prematurely!`)\n    }\n\n    console.info(`Registered player ${id}`);\n  }\n\n\n  /**\n   * Process an incoming is-ready message from a task player instance.\n   * \n   * If the task player instance is already registered we set its ready flag. \n   * Otherwise we memorize the message and apply it once the task player instance is registered.\n   */\n  public receiveReadySignal(sourceWindow: MessageEventSource) : void {\n    const receivingPlayer = this.findPlayerByWindow(sourceWindow);\n    if (receivingPlayer === undefined) {\n      this.pendingReadySignals.add(sourceWindow);\n    } else {\n      receivingPlayer.readyFlag = true;\n    }\n  }\n\n  /**\n   * Are all task players ready to receive messages?\n   */\n   public allPlayersReady() : boolean {\n    return this.players.length >= this.totalPlayerCount && this.players.every(candidate => candidate.readyFlag);\n  }\n\n  /**\n   * Get the window of the frame where the task player with the given id is running.\n   * \n   * This window may be used to send messages to the task player instance.\n   *    \n   * We return undefined if no task player instance is registered for the given id.\n   */\n  public getFrameWindow(playerId: string) : MessageEventSource | undefined {\n    return this.findPlayerById(playerId)?.frameWindow;\n  }\n\n\n  /**\n   * Get the id of the task player instance running in the given frame window.\n   * \n   * We return undefined if no task player instance is registered for the given frame window.\n   */\n   public getPlayerId(sourceWindow: MessageEventSource) : string | undefined {\n    return this.findPlayerByWindow(sourceWindow)?.id;\n  }\n\n  /**\n   * Find a player that is compatible with the given item version. \n   * \n   * We return undefined if no such player is registered. \n   * If there is more than one compatbile player we return the first one\n   * in registration order.\n   */\n  public findCompatiblePlayer(itemVersion: string) : { id: string, frameWindow: MessageEventSource } | undefined {\n    return this.players.find(candidate => candidate.isCompatible(itemVersion));\n  }\n\n  /**\n   * Determine whether the given item version is compatible with the given task player instance.\n   * \n   * We return false if no task player for the given id is registered.\n   */\n  public isCompatibleById(itemVersion: string, playerId: string) : boolean | undefined {\n    const playerInfo = this.findPlayerById(playerId);\n    return playerInfo !== undefined && playerInfo.isCompatible(itemVersion);\n  } \n\n  /**\n   * Determine whether the given item version is compatible with the given task player instance.\n   * \n   * We return false if no task player for the given window is registered.\n   */\n  public isCompatibleByWindow(itemVersion: string, targetWindow: MessageEventSource) : boolean | undefined {\n    const playerInfo = this.findPlayerByWindow(targetWindow);\n      return playerInfo !== undefined && playerInfo.isCompatible(itemVersion);\n  } \n  \n  /**\n   * Run the given action on all registered task players.\n   */\n  public doToAll(action: (targetWindow: MessageEventSource) => void) {\n    this.players.forEach(player => action(player.frameWindow));\n  }\n\n  /**\n   * Run the given action on all registered and compatible task players.\n   */\n   public doToAllCompatible(itemVersion: string, action: (targetWindow: MessageEventSource) => void) {\n    this.players.filter(player => player.isCompatible(itemVersion)).forEach(player => action(player.frameWindow));\n  }\n\n\n  /**\n   * Make the given player visible to the user (i.e. make its Iframe visible).\n   */\n  public show(playerId: string) : void {\n    this.players.forEach(player => {\n      const frame : HTMLIFrameElement | null = player.frameRef.current;\n      if (frame === null) {\n        console.warn(`Cannot switch visibility for player ${player.id} since frame element is null.`);\n        return;\n      }\n      frame.style.visibility = player.id === playerId ? 'visible' : 'collapse';\n    })\n  }\n\n  /**\n   * Get the ids of all registered task players.\n   */\n  public getPlayerIds() : string[] {\n    return this.players.map(player => player.id);\n  }\n\n  // ------------ private methods ----------------------------------------------\n\n  /**\n   * Apply a pending is-ready message for the given player instance and \n   * drop it from the pending list. \n   * \n   * We do nothing if no is-ready message is on the pending list\n   * for the given task player instance.\n   */\n  private applyPendingReadySignal(player: PlayerInfo) : void {\n    const playerWindow : MessageEventSource = player.frameWindow;\n    if (this.pendingReadySignals.has(playerWindow)) {\n      player.readyFlag = true;\n      this.pendingReadySignals.delete(playerWindow);\n    }\n  }\n\n  /**\n   * Find the task player instance info for the given task player frame window.\n   */\n  private findPlayerByWindow(frameWindow: MessageEventSource) : PlayerInfo | undefined {\n    return this.players.find(candidate => candidate.frameWindow === frameWindow)\n  }\n\n  /**\n   * Find the task player instance info for the given task player id.\n   */\n   private findPlayerById(playerId: String) : PlayerInfo | undefined {\n    return this.players.find(candidate => candidate.id === playerId)\n  }\n\n}\n\n/**\n * Information about a task player in the task player catalog.\n */\n interface PlayerInfo {\n  id: string,\n  frameWindow: MessageEventSource,\n  frameRef: React.MutableRefObject<HTMLIFrameElement|null>\n  readyFlag: boolean,\n  isCompatible: (itemVersion: string) => boolean,\n}\n","/**\n * The component managing all items that were downloaded already. \n * \n * Each item is identified by its unique name string.\n * We keep the version number for each item.\n */\nexport default class ItemCatalog {\n  private items : ItemInfo[] = [];\n\n  /**\n   * Register an item in the catalog.\n   */\n  public register(name: string, version: string) : void {\n    this.items.push({name: name, version: version});\n  }\n\n  /**\n   * Is an item with the given name already registered in the catalog?\n   */\n  public isRegistered(name: string) : boolean {\n    return this.findByName(name) !== undefined;\n  }\n\n  /**\n   * Get the runtime version of an item.\n   * \n   * We return undefined if no item with the given name was already registered.\n   */\n  public getVersion(name: string) : string | undefined {\n    return this.findByName(name)?.version;\n  }\n\n  /**\n   * Private helper: Find an item in the catalog.\n   */\n  private findByName(name: string) : ItemInfo | undefined {\n    return this.items.find(candidate => candidate.name === name);\n  }\n\n}\n\n/**\n * Internal item representation in the catalog.\n */\ninterface ItemInfo {\n  name: string, \n  version: string\n}\n\n\n","import React, { useEffect } from 'react';\nimport { PlayerConfiguration } from '../utils/FileDownload';\nimport PlayerCatalog from './PlayerCatalog';\n\n/**\n * An IFrame containing a CBA runtime running a task player.\n * \n * The component registers the task player as soon as the IFrame \n * is available. \n * \n * The properties itemWidth and itemHeight specify the size of the IFrame.\n * We load the source file for the IFrame from the react-runtime subfolder.\n */\nexport default function PlayerFrame( props: {\n    itemWidth: number, \n    itemHeight: number,\n    showPlayerInfo: boolean,\n    playerConfiguration: PlayerConfiguration,\n    playerCatalog: PlayerCatalog\n  }) : JSX.Element\n{\n\n  const { playerId, runtimeVersion, frameContentFile } = props.playerConfiguration;\n\n  // The late-binding references to the CBA-runtime IFrame element and the containing div element:\n  const frameRef: React.MutableRefObject<HTMLIFrameElement|null> = React.useRef(null);\n  const divRef: React.MutableRefObject<HTMLIFrameElement|null> = React.useRef(null);\n \n\n  // Once our frame is mounted register the player in the player catalog:\n  useEffect(() => {\n    const contentWindow = frameRef.current?.contentWindow;\n    if (contentWindow === null || contentWindow === undefined) {\n      console.warn(`Content window of task player frame is invalid!`);\n      return;\n    }\n    props.playerCatalog.registerPlayer(playerId, contentWindow, divRef, (itemVersion) => itemVersion === runtimeVersion);\n  }, [props.playerCatalog, playerId, runtimeVersion]);\n\n  return (\n    <div className='PlayerFrame' \n      ref={divRef}\n      style={{position: 'absolute', top: '0px', left: '0px', borderStyle: 'none', width: '100%', height: '100%', display: 'flex', alignItems: 'baseline', justifyContent: 'center'}}\n    >\n      { !props.showPlayerInfo || \n        <div style={{fontSize: 'xx-small' }}>\n          Current Player: {playerId }, Version: {runtimeVersion}\n        </div>\n      }\n      <iframe\n        ref={frameRef}\n        style={\n          { \n            width: props.itemWidth + 'px',\n            height: props.itemHeight + 'px'\n          }\n        }\n        title='PlayerFrame'\n        src={`./react-runtime/${frameContentFile}?eventTargetWindow=parent`}       \n        frameBorder=\"0\"  \n        scrolling=\"no\"  \n        className='cbaframe'\n      />\n    </div>\n  )\n}\n\n","import React from 'react';\nimport './App.css';\nimport MessageReceiver from './MessageReceiver';\nimport { configureMessageReceiver } from './Controller';\nimport TaskSequencer from './TaskSequencer';\nimport PlayerCatalog from '../runtime/PlayerCatalog';\nimport ItemCatalog from '../runtime/ItemCatalog';\nimport { ControllerConfiguration } from '../utils/FileDownload';\nimport PlayerFrame from '../runtime/PlayerFrame';\n\n/**\n * The layer that sets up all components: \n *  - The catalogs of items and task players.\n *  - The task sequencer.\n *  - The listeners in the message receiver.\n *  - The IFrames that contain the CBA runtimes with different runtime versions.\n * \n * The 'controller' is not a component (for now). \n * It is implemented as a set of listeners registered\n * in the message receiver.\n */\nexport function App(props: { messageReceiver : MessageReceiver, controllerConfiguration: ControllerConfiguration}) : JSX.Element {\n\n  const { messageReceiver, controllerConfiguration } = props;\n\n  // All task players that we support.\n  const playersArray = controllerConfiguration.players;\n\n  // The catalog of all the task players running in their Iframes:\n  const playerCatalog : PlayerCatalog = new PlayerCatalog(playersArray.length);\n\n  // The catalog of all items that are currently loaded to all compatible the task players:\n  const itemCatalog : ItemCatalog = new ItemCatalog();\n\n  // The task sequencer that decides which task to run next:\n  const taskSequencer : TaskSequencer = new TaskSequencer();\n\n  // Establish our behavior, i.e. our reactions to events coming in from the task players:\n  configureMessageReceiver(\n    messageReceiver, \n    taskSequencer, \n    playerCatalog, \n    itemCatalog, \n    controllerConfiguration);\n  \n  const itemHeight = controllerConfiguration.itemSize === undefined ? 768 : controllerConfiguration.itemSize.height;\n  const itemWidth = controllerConfiguration.itemSize === undefined ? 1024 : controllerConfiguration.itemSize.width;\n\n  return (\n    <div className='App' >\n      { playersArray.map(player => \n        <PlayerFrame\n          key={player.playerId}\n          itemWidth={itemWidth} \n          itemHeight={itemHeight}\n          showPlayerInfo = {controllerConfiguration.showPlayerInfo}\n          playerConfiguration = {player}\n          playerCatalog={playerCatalog}\n        />\n        )\n      }      \n    </div>\n  );\n}\n\n\n\n/**\n * Create and initialize the message receiver.\n * \n * We start its receiving loop on the global window.\n * \n * We create the message receiver outside of ReactDOM.render \n * to make sure it is not created multiple times\n * which would lead to multiple listeners on the global window.\n * \n */\nexport function buildMessageReceiver() : MessageReceiver {\n  const result = new MessageReceiver();\n  result.startReceiving();\n  return result;\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App, buildMessageReceiver} from './controller/App';\nimport { ControllerConfiguration, downloadControllerConfig } from './utils/FileDownload';\n\n/**\n * The entry point into the application.\n */\n\n// We start the application rendering after fetching our controller configuration.\ndownloadControllerConfig()\n.then((controllerConfiguration: ControllerConfiguration) => {\n  // We create the message receiver here to make sure it is created exactly once:\n  const messageReceiver = buildMessageReceiver();\n  \n  ReactDOM.render(\n    <React.StrictMode>\n      <App messageReceiver={messageReceiver} controllerConfiguration={controllerConfiguration} />\n    </React.StrictMode>,\n    document.getElementById('ee4basicsRoot')\n  );  \n})\n.catch((error) => {\n  console.warn(`Could not initialize assessment properly: ${error.message}`);\n});\n"],"sourceRoot":""}